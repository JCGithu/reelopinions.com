{"version":3,"sources":["webpack:///./src/templates/author.js"],"names":["Author","data","location","pageContext","author","ghostAuthor","posts","allGhostPost","edges","twitterUrl","twitter","replace","facebookUrl","facebook","type","className","name","bio","website","href","target","rel","profile_image","src","alt","map","node","key","id","post"],"mappings":"6FAAA,wDAwGeA,UA3FA,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC1BC,EAASH,EAAKI,YACdC,EAAQL,EAAKM,aAAaC,MAC1BC,EAAaL,EAAOM,QAAP,uBACQN,EAAOM,QAAQC,QAAQ,KAAvB,IACvB,KACEC,EAAcR,EAAOS,SAAP,4BACYT,EAAOS,SAASF,QAAQ,MAAxB,IAC5B,KAEJ,OACE,oCACE,kBAAC,IAAD,CAAUV,KAAMA,EAAMC,SAAUA,EAAUY,KAAK,YAC/C,kBAAC,IAAD,KACE,yBAAKC,UAAU,aACb,4BAAQA,UAAU,iBAChB,yBAAKA,UAAU,yBACb,4BAAKX,EAAOY,MACXZ,EAAOa,KAAO,2BAAIb,EAAOa,KAC1B,yBAAKF,UAAU,sBACZX,EAAOc,SACN,uBACEH,UAAU,qBACVI,KAAMf,EAAOc,QACbE,OAAO,SACPC,IAAI,uBAJN,WASDZ,GACC,uBACEM,UAAU,qBACVI,KAAMV,EACNW,OAAO,SACPC,IAAI,uBAJN,WASDT,GACC,uBACEG,UAAU,qBACVI,KAAMP,EACNQ,OAAO,SACPC,IAAI,uBAJN,cAWN,yBAAKN,UAAU,uBACZX,EAAOkB,eACN,yBAAKC,IAAKnB,EAAOkB,cAAeE,IAAKpB,EAAOY,SAIlD,6BAASD,UAAU,aAChBT,EAAMmB,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAET,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,GAAIC,KAAMH,QAGlC,kBAAC,IAAD,CAAYvB,YAAaA","file":"component---src-templates-author-js-73432e8d14706cb8fe9a.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\n\nimport { Layout, PostCard, Pagination } from \"../components/common\";\nimport { MetaData } from \"../components/common/meta\";\n\n/**\n * Author page (/author/:slug)\n *\n * Loads all posts for the requested author incl. pagination.\n *\n */\nconst Author = ({ data, location, pageContext }) => {\n  const author = data.ghostAuthor;\n  const posts = data.allGhostPost.edges;\n  const twitterUrl = author.twitter\n    ? `https://twitter.com/${author.twitter.replace(/^@/, ``)}`\n    : null;\n  const facebookUrl = author.facebook\n    ? `https://www.facebook.com/${author.facebook.replace(/^\\//, ``)}`\n    : null;\n\n  return (\n    <>\n      <MetaData data={data} location={location} type=\"profile\" />\n      <Layout>\n        <div className=\"container\">\n          <header className=\"author-header\">\n            <div className=\"author-header-content\">\n              <h1>{author.name}</h1>\n              {author.bio && <p>{author.bio}</p>}\n              <div className=\"author-header-meta\">\n                {author.website && (\n                  <a\n                    className=\"author-header-item\"\n                    href={author.website}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Website\n                  </a>\n                )}\n                {twitterUrl && (\n                  <a\n                    className=\"author-header-item\"\n                    href={twitterUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Twitter\n                  </a>\n                )}\n                {facebookUrl && (\n                  <a\n                    className=\"author-header-item\"\n                    href={facebookUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Facebook\n                  </a>\n                )}\n              </div>\n            </div>\n            <div className=\"author-header-image\">\n              {author.profile_image && (\n                <img src={author.profile_image} alt={author.name} />\n              )}\n            </div>\n          </header>\n          <section className=\"post-feed\">\n            {posts.map(({ node }) => (\n              // The tag below includes the markup for each post - components/common/PostCard.js\n              <PostCard key={node.id} post={node} />\n            ))}\n          </section>\n          <Pagination pageContext={pageContext} />\n        </div>\n      </Layout>\n    </>\n  );\n};\n\nAuthor.propTypes = {\n  data: PropTypes.shape({\n    ghostAuthor: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      cover_image: PropTypes.string,\n      profile_image: PropTypes.string,\n      website: PropTypes.string,\n      bio: PropTypes.string,\n      location: PropTypes.string,\n      facebook: PropTypes.string,\n      twitter: PropTypes.string,\n    }),\n    allGhostPost: PropTypes.object.isRequired,\n  }).isRequired,\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n  pageContext: PropTypes.object,\n};\n\nexport default Author;\n\nexport const pageQuery = graphql`\n  query GhostAuthorQuery($slug: String!, $limit: Int!, $skip: Int!) {\n    ghostAuthor(slug: { eq: $slug }) {\n      ...GhostAuthorFields\n    }\n    allGhostPost(\n      sort: { order: DESC, fields: [published_at] }\n      filter: { authors: { elemMatch: { slug: { eq: $slug } } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          ...GhostPostFields\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}